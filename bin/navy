#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib') unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/../lib')

require 'navy/ship'
require 'optparse'

ship_options = { options: {} }
options      = ship_options[:options]

op = OptionParser.new("", 24, '  ') do |opts|
  cmd = File.basename($0)
  opts.banner = "Usage: #{cmd} [ruby options] [#{cmd} options]"

  opts.separator "Ruby options:"

  opts.on("-d", "--debug", "set debugging flags (set $DEBUG to true)") do
    $DEBUG = true
  end

  opts.separator "#{cmd} options:"

  opts.on("-D", "--daemonize", "run daemonized in the background") do |d|
    ship_options[:daemonize] = !!d
  end

  opts.on("-c", "--config-file FILE", "Navy-specific config file") do |f|
    options[:config_file] = f
  end

  opts.separator "Common options:"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts.to_s.gsub(/^.*DEPRECATED.*$/s, '')
    exit
  end

  opts.on_tail("-v", "--version", "Show version") do
    puts "#{cmd} v#{Navy::VERSION}"
    exit
  end

  opts.parse! ARGV

end

unless options[:config_file]
  $stderr.puts "ERROR: config file required", ''
  puts op.to_s.gsub(/^.*DEPRECATED.*$/s, '')
  exit 1
end

# app = Mule.builder('config', op)
# op = nil

if $DEBUG
  require 'pp'
  pp({
    navy_options: options,
    daemonize:    ship_options[:daemonize]
  })
end

Navy::Ship.launch!(options) if ship_options[:daemonize]
Navy::Admiral.new(options).start.join